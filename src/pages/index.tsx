import Head from "next/head";
import { Inter } from "@next/font/google";
import { Card } from "../components/Card";
import { gql, useQuery } from "@apollo/client";
import Link from "next/link";
import { useUser } from "@auth0/nextjs-auth0/client";
import { Link as LinkData } from "@prisma/client";

const inter = Inter({ subsets: ["latin"] });

const GetAllLinksQuery = gql`
	query GetAllLinks($first: Int!, $after: String) {
		links(first: $first, after: $after) {
			pageInfo {
				endCursor
				hasNextPage
			}
			edges {
				cursor
				node {
					imageUrl
					url
					title
					category
					description
					id
				}
			}
		}
	}
`;

type GetAllLinksQueryResponse = {
	links: {
		pageInfo: {
			endCursor: string;
			hasNextPage: boolean;
		};
		edges: {
			cursor: string;
			node: Partial<LinkData>;
		}[];
	};
};

export default function Home() {
	const { user } = useUser();
	const { data, error, loading, fetchMore } =
		useQuery<GetAllLinksQueryResponse>(GetAllLinksQuery, {
			variables: {
				first: 2,
			},
		});

	if (!user) {
		return (
			<div className="flex items-center justify-center">
				To view the awesome links you need to{" "}
				<Link
					href="/api/auth/login"
					className=" block bg-gray-100 border-0 py-1 px-3 focus:outline-none hover:bg-gray-200 rounded text-base mt-4 md:mt-0"
				>
					Login
				</Link>
			</div>
		);
	}

	if (loading) return <p>Loading....</p>;
	if (error || !data)
		return <p>Oops, something went wrong: {JSON.stringify(error)}</p>;

	const { endCursor, hasNextPage } = data.links.pageInfo;

	return (
		<>
			<Head>
				<title>Create Next App</title>
				<meta
					name="description"
					content="Generated by create next app"
				/>
				<meta
					name="viewport"
					content="width=device-width, initial-scale=1"
				/>
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<main className="container mx-auto max-w-5xl my-20 px-5">
				<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-5">
					{data?.links.edges.map(({ node }: any) => (
						<Link href={`/link/${node.id}`} key={node.id}>
							<Card
								id={node.id}
								url={node.url}
								title={node.title}
								description={node.description}
								imageUrl={node.imageUrl}
								category={node.category}
							/>
						</Link>
					))}
				</div>
				{hasNextPage ? (
					<button
						style={{
							backgroundColor: "blueviolet",
							padding: "0.25em",
							borderRadius: "20px",
						}}
						onClick={() => {
							fetchMore({
								variables: { after: endCursor },
								updateQuery: (
									prevResult,
									{ fetchMoreResult }
								) => {
									fetchMoreResult.links.edges = [
										...prevResult.links.edges,
										...fetchMoreResult.links.edges,
									];
									return fetchMoreResult;
								},
							});
						}}
					>
						more
					</button>
				) : null}
			</main>
		</>
	);
}
